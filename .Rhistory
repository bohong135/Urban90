input <- c("Amount.Requested", "Amount.Funded.By.Investors", "Loan.Length", "Loan.Purpose",
"Debt.To.Income.Ratio", "State", "Home.Ownership", "Monthly.Income",
"FICO.Range", "Open.CREDIT.Lines", "Revolving.CREDIT.Balance", "Inquiries.in.the.Last.6.Months",
"Employment.Length", "X")
numeric <- c("Amount.Requested", "Amount.Funded.By.Investors", "FICO.Range", "Revolving.CREDIT.Balance",
"Inquiries.in.the.Last.6.Months", "Employment.Length")
categoric <- c("Loan.Length", "Loan.Purpose", "Debt.To.Income.Ratio", "State",
"Home.Ownership", "Monthly.Income", "Open.CREDIT.Lines", "X")
target  <- "Interest.Rate"
risk    <- NULL
ident   <- NULL
ignore  <- NULL
weights <- NULL
#============================================================
# Rattle timestamp: 2014-04-05 22:28:29 x86_64-w64-mingw32
# KMeans
# Reset the random number seed to obtain the same results each time.
set.seed(crv$seed)
# The 'reshape' package provides the 'rescaler' function.
require(reshape, quietly=TRUE)
# Generate a kmeans cluster of size 10.
kmeans <- kmeans(sapply(na.omit(dataset[sample, numeric]), rescaler, "range"), 10)
#============================================================
# Rattle timestamp: 2014-04-05 22:28:29 x86_64-w64-mingw32
# Report on the cluster characteristics.
# Cluster sizes:
paste(kmeans$size, collapse=' ')
# Data means:
colMeans(sapply(na.omit(dataset[sample, numeric]), rescaler, "range"))
# Cluster centers:
kmeans$centers
# Within cluster sum of squares:
kmeans$withinss
# Time taken: 0.01 secs
# The 'fpc' package provides the 'plotcluster' function.
require(fpc, quietly=TRUE)
# Generate a discriminant coordinates plot.
plotcluster(na.omit(dataset[sample, intersect(input, numeric)]), kmeans$cluster)
title(main="Discriminant Coordinates loansData.csv",
sub=paste("Rattle", format(Sys.time(), "%Y-%b-%d %H:%M:%S"), Sys.info()["user"]))
# Rattle is Copyright (c) 2006-2013 Togaware Pty Ltd.
#============================================================
# Rattle timestamp: 2014-04-05 22:27:59 x86_64-w64-mingw32
# Rattle version 3.0.2 user 'Asus'
# Export this log textview to a file using the Export button or the Tools
# menu to save a log of all activity. This facilitates repeatability. Exporting
# to file 'myrf01.R', for example, allows us to the type in the R Console
# the command source('myrf01.R') to repeat the process automatically.
# Generally, we may want to edit the file to suit our needs. We can also directly
# edit this current log textview to record additional information before exporting.
# Saving and loading projects also retains this log.
library(rattle)
# This log generally records the process of building a model. However, with very
# little effort the log can be used to score a new dataset. The logical variable
# 'building' is used to toggle between generating transformations, as when building
# a model, and simply using the transformations, as when scoring a dataset.
building <- TRUE
scoring  <- ! building
# The colorspace package is used to generate the colours used in plots, if available.
library(colorspace)
# A pre-defined value is used to reset the random seed so that results are repeatable.
seed <- 42
#============================================================
# Rattle timestamp: 2014-04-05 22:28:15 x86_64-w64-mingw32
# Load the data.
dataset <- read.csv("file:///C:/Users/Asus/Desktop/loansData.csv", na.strings=c(".", "NA", "", "?"), strip.white=TRUE, encoding="UTF-8")
#============================================================
# Rattle timestamp: 2014-04-05 22:28:16 x86_64-w64-mingw32
# Note the user selections.
# Build the training/validate/test datasets.
set.seed(seed)
nobs <- nrow(dataset) # 2500 observations
sample <- train <- sample(nrow(dataset), 0.7*nobs) # 1750 observations
validate <- sample(setdiff(seq_len(nrow(dataset)), train), 0.15*nobs) # 375 observations
test <- setdiff(setdiff(seq_len(nrow(dataset)), train), validate) # 375 observations
# The following variable selections have been noted.
input <- c("Amount.Requested", "Amount.Funded.By.Investors", "Interest.Rate", "Loan.Length",
"Debt.To.Income.Ratio", "State", "Home.Ownership", "Monthly.Income",
"FICO.Range", "Open.CREDIT.Lines", "Revolving.CREDIT.Balance", "Inquiries.in.the.Last.6.Months",
"Employment.Length", "X")
numeric <- c("Amount.Requested", "Amount.Funded.By.Investors", "Interest.Rate", "FICO.Range",
"Revolving.CREDIT.Balance", "Inquiries.in.the.Last.6.Months", "Employment.Length")
categoric <- c("Loan.Length", "Debt.To.Income.Ratio", "State", "Home.Ownership",
"Monthly.Income", "Open.CREDIT.Lines", "X")
target  <- "Loan.Purpose"
risk    <- NULL
ident   <- NULL
ignore  <- NULL
weights <- NULL
#============================================================
# Rattle timestamp: 2014-04-05 22:28:23 x86_64-w64-mingw32
# Note the user selections.
# Build the training/validate/test datasets.
set.seed(seed)
nobs <- nrow(dataset) # 2500 observations
sample <- train <- sample(nrow(dataset), 0.7*nobs) # 1750 observations
validate <- sample(setdiff(seq_len(nrow(dataset)), train), 0.15*nobs) # 375 observations
test <- setdiff(setdiff(seq_len(nrow(dataset)), train), validate) # 375 observations
# The following variable selections have been noted.
input <- c("Amount.Requested", "Amount.Funded.By.Investors", "Loan.Length", "Loan.Purpose",
"Debt.To.Income.Ratio", "State", "Home.Ownership", "Monthly.Income",
"FICO.Range", "Open.CREDIT.Lines", "Revolving.CREDIT.Balance", "Inquiries.in.the.Last.6.Months",
"Employment.Length", "X")
numeric <- c("Amount.Requested", "Amount.Funded.By.Investors", "FICO.Range", "Revolving.CREDIT.Balance",
"Inquiries.in.the.Last.6.Months", "Employment.Length")
categoric <- c("Loan.Length", "Loan.Purpose", "Debt.To.Income.Ratio", "State",
"Home.Ownership", "Monthly.Income", "Open.CREDIT.Lines", "X")
target  <- "Interest.Rate"
risk    <- NULL
ident   <- NULL
ignore  <- NULL
weights <- NULL
#============================================================
# Rattle timestamp: 2014-04-05 22:28:29 x86_64-w64-mingw32
# KMeans
# Reset the random number seed to obtain the same results each time.
set.seed(seed)
# The 'reshape' package provides the 'rescaler' function.
require(reshape, quietly=TRUE)
# Generate a kmeans cluster of size 10.
kmeans <- kmeans(sapply(na.omit(dataset[sample, numeric]), rescaler, "range"), 10)
#============================================================
# Rattle timestamp: 2014-04-05 22:28:29 x86_64-w64-mingw32
# Report on the cluster characteristics.
# Cluster sizes:
paste(kmeans$size, collapse=' ')
# Data means:
colMeans(sapply(na.omit(dataset[sample, numeric]), rescaler, "range"))
# Cluster centers:
kmeans$centers
# Within cluster sum of squares:
kmeans$withinss
# Time taken: 0.01 secs
# The 'fpc' package provides the 'plotcluster' function.
require(fpc, quietly=TRUE)
# Generate a discriminant coordinates plot.
plotcluster(na.omit(dataset[sample, intersect(input, numeric)]), kmeans$cluster)
title(main="Discriminant Coordinates loansData.csv",
sub=paste("Rattle", format(Sys.time(), "%Y-%b-%d %H:%M:%S"), Sys.info()["user"]))
install.packages("reshape")
# Rattle is Copyright (c) 2006-2013 Togaware Pty Ltd.
#============================================================
# Rattle timestamp: 2014-04-05 22:27:59 x86_64-w64-mingw32
# Rattle version 3.0.2 user 'Asus'
# Export this log textview to a file using the Export button or the Tools
# menu to save a log of all activity. This facilitates repeatability. Exporting
# to file 'myrf01.R', for example, allows us to the type in the R Console
# the command source('myrf01.R') to repeat the process automatically.
# Generally, we may want to edit the file to suit our needs. We can also directly
# edit this current log textview to record additional information before exporting.
# Saving and loading projects also retains this log.
library(rattle)
# This log generally records the process of building a model. However, with very
# little effort the log can be used to score a new dataset. The logical variable
# 'building' is used to toggle between generating transformations, as when building
# a model, and simply using the transformations, as when scoring a dataset.
building <- TRUE
scoring  <- ! building
# The colorspace package is used to generate the colours used in plots, if available.
library(colorspace)
# A pre-defined value is used to reset the random seed so that results are repeatable.
seed <- 42
#============================================================
# Rattle timestamp: 2014-04-05 22:28:15 x86_64-w64-mingw32
# Load the data.
dataset <- read.csv("file:///C:/Users/Asus/Desktop/loansData.csv", na.strings=c(".", "NA", "", "?"), strip.white=TRUE, encoding="UTF-8")
#============================================================
# Rattle timestamp: 2014-04-05 22:28:16 x86_64-w64-mingw32
# Note the user selections.
# Build the training/validate/test datasets.
set.seed(seed)
nobs <- nrow(dataset) # 2500 observations
sample <- train <- sample(nrow(dataset), 0.7*nobs) # 1750 observations
validate <- sample(setdiff(seq_len(nrow(dataset)), train), 0.15*nobs) # 375 observations
test <- setdiff(setdiff(seq_len(nrow(dataset)), train), validate) # 375 observations
# The following variable selections have been noted.
input <- c("Amount.Requested", "Amount.Funded.By.Investors", "Interest.Rate", "Loan.Length",
"Debt.To.Income.Ratio", "State", "Home.Ownership", "Monthly.Income",
"FICO.Range", "Open.CREDIT.Lines", "Revolving.CREDIT.Balance", "Inquiries.in.the.Last.6.Months",
"Employment.Length", "X")
numeric <- c("Amount.Requested", "Amount.Funded.By.Investors", "Interest.Rate", "FICO.Range",
"Revolving.CREDIT.Balance", "Inquiries.in.the.Last.6.Months", "Employment.Length")
categoric <- c("Loan.Length", "Debt.To.Income.Ratio", "State", "Home.Ownership",
"Monthly.Income", "Open.CREDIT.Lines", "X")
target  <- "Loan.Purpose"
risk    <- NULL
ident   <- NULL
ignore  <- NULL
weights <- NULL
#============================================================
# Rattle timestamp: 2014-04-05 22:28:23 x86_64-w64-mingw32
# Note the user selections.
# Build the training/validate/test datasets.
set.seed(seed)
nobs <- nrow(dataset) # 2500 observations
sample <- train <- sample(nrow(dataset), 0.7*nobs) # 1750 observations
validate <- sample(setdiff(seq_len(nrow(dataset)), train), 0.15*nobs) # 375 observations
test <- setdiff(setdiff(seq_len(nrow(dataset)), train), validate) # 375 observations
# The following variable selections have been noted.
input <- c("Amount.Requested", "Amount.Funded.By.Investors", "Loan.Length", "Loan.Purpose",
"Debt.To.Income.Ratio", "State", "Home.Ownership", "Monthly.Income",
"FICO.Range", "Open.CREDIT.Lines", "Revolving.CREDIT.Balance", "Inquiries.in.the.Last.6.Months",
"Employment.Length", "X")
numeric <- c("Amount.Requested", "Amount.Funded.By.Investors", "FICO.Range", "Revolving.CREDIT.Balance",
"Inquiries.in.the.Last.6.Months", "Employment.Length")
categoric <- c("Loan.Length", "Loan.Purpose", "Debt.To.Income.Ratio", "State",
"Home.Ownership", "Monthly.Income", "Open.CREDIT.Lines", "X")
target  <- "Interest.Rate"
risk    <- NULL
ident   <- NULL
ignore  <- NULL
weights <- NULL
#============================================================
# Rattle timestamp: 2014-04-05 22:28:29 x86_64-w64-mingw32
# KMeans
# Reset the random number seed to obtain the same results each time.
set.seed(seed)
# The 'reshape' package provides the 'rescaler' function.
require(reshape, quietly=TRUE)
# Generate a kmeans cluster of size 10.
kmeans <- kmeans(sapply(na.omit(dataset[sample, numeric]), rescaler, "range"), 10)
#============================================================
# Rattle timestamp: 2014-04-05 22:28:29 x86_64-w64-mingw32
# Report on the cluster characteristics.
# Cluster sizes:
paste(kmeans$size, collapse=' ')
# Data means:
colMeans(sapply(na.omit(dataset[sample, numeric]), rescaler, "range"))
# Cluster centers:
kmeans$centers
# Within cluster sum of squares:
kmeans$withinss
# Time taken: 0.01 secs
# The 'fpc' package provides the 'plotcluster' function.
require(fpc, quietly=TRUE)
# Generate a discriminant coordinates plot.
plotcluster(na.omit(dataset[sample, intersect(input, numeric)]), kmeans$cluster)
title(main="Discriminant Coordinates loansData.csv",
sub=paste("Rattle", format(Sys.time(), "%Y-%b-%d %H:%M:%S"), Sys.info()["user"]))
install.packages("fpc")
# Rattle is Copyright (c) 2006-2013 Togaware Pty Ltd.
#============================================================
# Rattle timestamp: 2014-04-05 22:27:59 x86_64-w64-mingw32
# Rattle version 3.0.2 user 'Asus'
# Export this log textview to a file using the Export button or the Tools
# menu to save a log of all activity. This facilitates repeatability. Exporting
# to file 'myrf01.R', for example, allows us to the type in the R Console
# the command source('myrf01.R') to repeat the process automatically.
# Generally, we may want to edit the file to suit our needs. We can also directly
# edit this current log textview to record additional information before exporting.
# Saving and loading projects also retains this log.
library(rattle)
# This log generally records the process of building a model. However, with very
# little effort the log can be used to score a new dataset. The logical variable
# 'building' is used to toggle between generating transformations, as when building
# a model, and simply using the transformations, as when scoring a dataset.
building <- TRUE
scoring  <- ! building
# The colorspace package is used to generate the colours used in plots, if available.
library(colorspace)
# A pre-defined value is used to reset the random seed so that results are repeatable.
seed <- 42
#============================================================
# Rattle timestamp: 2014-04-05 22:28:15 x86_64-w64-mingw32
# Load the data.
dataset <- read.csv("file:///C:/Users/Asus/Desktop/loansData.csv", na.strings=c(".", "NA", "", "?"), strip.white=TRUE, encoding="UTF-8")
#============================================================
# Rattle timestamp: 2014-04-05 22:28:16 x86_64-w64-mingw32
# Note the user selections.
# Build the training/validate/test datasets.
set.seed(seed)
nobs <- nrow(dataset) # 2500 observations
sample <- train <- sample(nrow(dataset), 0.7*nobs) # 1750 observations
validate <- sample(setdiff(seq_len(nrow(dataset)), train), 0.15*nobs) # 375 observations
test <- setdiff(setdiff(seq_len(nrow(dataset)), train), validate) # 375 observations
# The following variable selections have been noted.
input <- c("Amount.Requested", "Amount.Funded.By.Investors", "Interest.Rate", "Loan.Length",
"Debt.To.Income.Ratio", "State", "Home.Ownership", "Monthly.Income",
"FICO.Range", "Open.CREDIT.Lines", "Revolving.CREDIT.Balance", "Inquiries.in.the.Last.6.Months",
"Employment.Length", "X")
numeric <- c("Amount.Requested", "Amount.Funded.By.Investors", "Interest.Rate", "FICO.Range",
"Revolving.CREDIT.Balance", "Inquiries.in.the.Last.6.Months", "Employment.Length")
categoric <- c("Loan.Length", "Debt.To.Income.Ratio", "State", "Home.Ownership",
"Monthly.Income", "Open.CREDIT.Lines", "X")
target  <- "Loan.Purpose"
risk    <- NULL
ident   <- NULL
ignore  <- NULL
weights <- NULL
#============================================================
# Rattle timestamp: 2014-04-05 22:28:23 x86_64-w64-mingw32
# Note the user selections.
# Build the training/validate/test datasets.
set.seed(seed)
nobs <- nrow(dataset) # 2500 observations
sample <- train <- sample(nrow(dataset), 0.7*nobs) # 1750 observations
validate <- sample(setdiff(seq_len(nrow(dataset)), train), 0.15*nobs) # 375 observations
test <- setdiff(setdiff(seq_len(nrow(dataset)), train), validate) # 375 observations
# The following variable selections have been noted.
input <- c("Amount.Requested", "Amount.Funded.By.Investors", "Loan.Length", "Loan.Purpose",
"Debt.To.Income.Ratio", "State", "Home.Ownership", "Monthly.Income",
"FICO.Range", "Open.CREDIT.Lines", "Revolving.CREDIT.Balance", "Inquiries.in.the.Last.6.Months",
"Employment.Length", "X")
numeric <- c("Amount.Requested", "Amount.Funded.By.Investors", "FICO.Range", "Revolving.CREDIT.Balance",
"Inquiries.in.the.Last.6.Months", "Employment.Length")
categoric <- c("Loan.Length", "Loan.Purpose", "Debt.To.Income.Ratio", "State",
"Home.Ownership", "Monthly.Income", "Open.CREDIT.Lines", "X")
target  <- "Interest.Rate"
risk    <- NULL
ident   <- NULL
ignore  <- NULL
weights <- NULL
#============================================================
# Rattle timestamp: 2014-04-05 22:28:29 x86_64-w64-mingw32
# KMeans
# Reset the random number seed to obtain the same results each time.
set.seed(seed)
# The 'reshape' package provides the 'rescaler' function.
require(reshape, quietly=TRUE)
# Generate a kmeans cluster of size 10.
kmeans <- kmeans(sapply(na.omit(dataset[sample, numeric]), rescaler, "range"), 10)
#============================================================
# Rattle timestamp: 2014-04-05 22:28:29 x86_64-w64-mingw32
# Report on the cluster characteristics.
# Cluster sizes:
paste(kmeans$size, collapse=' ')
# Data means:
colMeans(sapply(na.omit(dataset[sample, numeric]), rescaler, "range"))
# Cluster centers:
kmeans$centers
# Within cluster sum of squares:
kmeans$withinss
# Time taken: 0.01 secs
# The 'fpc' package provides the 'plotcluster' function.
require(fpc, quietly=TRUE)
# Generate a discriminant coordinates plot.
plotcluster(na.omit(dataset[sample, intersect(input, numeric)]), kmeans$cluster)
title(main="Discriminant Coordinates loansData.csv",
sub=paste("Rattle", format(Sys.time(), "%Y-%b-%d %H:%M:%S"), Sys.info()["user"]))
# Rattle is Copyright (c) 2006-2013 Togaware Pty Ltd.
#============================================================
# Rattle timestamp: 2014-04-05 22:27:59 x86_64-w64-mingw32
# Rattle version 3.0.2 user 'Asus'
# Export this log textview to a file using the Export button or the Tools
# menu to save a log of all activity. This facilitates repeatability. Exporting
# to file 'myrf01.R', for example, allows us to the type in the R Console
# the command source('myrf01.R') to repeat the process automatically.
# Generally, we may want to edit the file to suit our needs. We can also directly
# edit this current log textview to record additional information before exporting.
# Saving and loading projects also retains this log.
library(rattle)
# This log generally records the process of building a model. However, with very
# little effort the log can be used to score a new dataset. The logical variable
# 'building' is used to toggle between generating transformations, as when building
# a model, and simply using the transformations, as when scoring a dataset.
building <- TRUE
scoring  <- ! building
# The colorspace package is used to generate the colours used in plots, if available.
library(colorspace)
# A pre-defined value is used to reset the random seed so that results are repeatable.
seed <- 42
#============================================================
# Rattle timestamp: 2014-04-05 22:28:15 x86_64-w64-mingw32
# Load the data.
dataset <- read.csv("file:///C:/Users/Asus/Desktop/loansData.csv", na.strings=c(".", "NA", "", "?"), strip.white=TRUE, encoding="UTF-8")
#============================================================
# Rattle timestamp: 2014-04-05 22:28:16 x86_64-w64-mingw32
# Note the user selections.
# Build the training/validate/test datasets.
set.seed(seed)
nobs <- nrow(dataset) # 2500 observations
sample <- train <- sample(nrow(dataset), 0.7*nobs) # 1750 observations
validate <- sample(setdiff(seq_len(nrow(dataset)), train), 0.15*nobs) # 375 observations
test <- setdiff(setdiff(seq_len(nrow(dataset)), train), validate) # 375 observations
# The following variable selections have been noted.
input <- c("Amount.Requested", "Amount.Funded.By.Investors", "Interest.Rate", "Loan.Length",
"Debt.To.Income.Ratio", "State", "Home.Ownership", "Monthly.Income",
"FICO.Range", "Open.CREDIT.Lines", "Revolving.CREDIT.Balance", "Inquiries.in.the.Last.6.Months",
"Employment.Length", "X")
numeric <- c("Amount.Requested", "Amount.Funded.By.Investors", "Interest.Rate", "FICO.Range",
"Revolving.CREDIT.Balance", "Inquiries.in.the.Last.6.Months", "Employment.Length")
categoric <- c("Loan.Length", "Debt.To.Income.Ratio", "State", "Home.Ownership",
"Monthly.Income", "Open.CREDIT.Lines", "X")
target  <- "Loan.Purpose"
risk    <- NULL
ident   <- NULL
ignore  <- NULL
weights <- NULL
#============================================================
# Rattle timestamp: 2014-04-05 22:28:23 x86_64-w64-mingw32
# Note the user selections.
# Build the training/validate/test datasets.
set.seed(seed)
nobs <- nrow(dataset) # 2500 observations
sample <- train <- sample(nrow(dataset), 0.7*nobs) # 1750 observations
validate <- sample(setdiff(seq_len(nrow(dataset)), train), 0.15*nobs) # 375 observations
test <- setdiff(setdiff(seq_len(nrow(dataset)), train), validate) # 375 observations
# The following variable selections have been noted.
input <- c("Amount.Requested", "Amount.Funded.By.Investors", "Loan.Length", "Loan.Purpose",
"Debt.To.Income.Ratio", "State", "Home.Ownership", "Monthly.Income",
"FICO.Range", "Open.CREDIT.Lines", "Revolving.CREDIT.Balance", "Inquiries.in.the.Last.6.Months",
"Employment.Length", "X")
numeric <- c("Amount.Requested", "Amount.Funded.By.Investors", "FICO.Range", "Revolving.CREDIT.Balance",
"Inquiries.in.the.Last.6.Months", "Employment.Length")
categoric <- c("Loan.Length", "Loan.Purpose", "Debt.To.Income.Ratio", "State",
"Home.Ownership", "Monthly.Income", "Open.CREDIT.Lines", "X")
target  <- "Interest.Rate"
risk    <- NULL
ident   <- NULL
ignore  <- NULL
weights <- NULL
#============================================================
# Rattle timestamp: 2014-04-05 22:28:29 x86_64-w64-mingw32
# KMeans
# Reset the random number seed to obtain the same results each time.
set.seed(seed)
# The 'reshape' package provides the 'rescaler' function.
require(reshape, quietly=TRUE)
# Generate a kmeans cluster of size 10.
kmeans <- kmeans(sapply(na.omit(dataset[sample, numeric]), rescaler, "range"), 10)
#============================================================
# Rattle timestamp: 2014-04-05 22:28:29 x86_64-w64-mingw32
# Report on the cluster characteristics.
# Cluster sizes:
paste(kmeans$size, collapse=' ')
# Data means:
colMeans(sapply(na.omit(dataset[sample, numeric]), rescaler, "range"))
# Cluster centers:
kmeans$centers
# Within cluster sum of squares:
kmeans$withinss
# Time taken: 0.01 secs
# The 'fpc' package provides the 'plotcluster' function.
require(fpc, quietly=TRUE)
# Generate a discriminant coordinates plot.
plotcluster(na.omit(dataset[sample, intersect(input, numeric)]), kmeans$cluster)
title(main="Discriminant Coordinates loansData.csv",
sub=paste("Rattle", format(Sys.time(), "%Y-%b-%d %H:%M:%S"), Sys.info()["user"]))
# Rattle is Copyright (c) 2006-2013 Togaware Pty Ltd.
#============================================================
# Rattle timestamp: 2014-04-05 20:25:43 x86_64-w64-mingw32
# Rattle version 3.0.2 user 'Asus'
# Export this log textview to a file using the Export button or the Tools
# menu to save a log of all activity. This facilitates repeatability. Exporting
# to file 'myrf01.R', for example, allows us to the type in the R Console
# the command source('myrf01.R') to repeat the process automatically.
# Generally, we may want to edit the file to suit our needs. We can also directly
# edit this current log textview to record additional information before exporting.
# Saving and loading projects also retains this log.
library(rattle)
# This log generally records the process of building a model. However, with very
# little effort the log can be used to score a new dataset. The logical variable
# 'building' is used to toggle between generating transformations, as when building
# a model, and simply using the transformations, as when scoring a dataset.
building <- TRUE
scoring  <- ! building
# The colorspace package is used to generate the colours used in plots, if available.
library(colorspace)
# A pre-defined value is used to reset the random seed so that results are repeatable.
crv$seed <- 42
#============================================================
# Rattle timestamp: 2014-04-05 20:26:10 x86_64-w64-mingw32
# Load the data.
dataset <- read.csv("file:///C:/Users/Asus/Desktop/loansData.csv", na.strings=c(".", "NA", "", "?"), strip.white=TRUE, encoding="UTF-8")
#============================================================
# Rattle timestamp: 2014-04-05 20:26:11 x86_64-w64-mingw32
# Note the user selections.
# Build the training/validate/test datasets.
set.seed(crv$seed)
nobs     <- nrow(dataset) # 2500 observations
sample   <- train <- sample(nrow(dataset), 0.7*nobs) # 1750 observations
validate <- sample(setdiff(seq_len(nrow(dataset)), train), 0.15*nobs) # 375 observations
test     <- setdiff(setdiff(seq_len(nrow(dataset)), train), validate) # 375 observations
# The following variable selections have been noted.
input <- c("Amount.Requested", "Amount.Funded.By.Investors", "Interest.Rate", "Loan.Length",
"Debt.To.Income.Ratio", "State", "Home.Ownership", "Monthly.Income",
"FICO.Range", "Open.CREDIT.Lines", "Revolving.CREDIT.Balance", "Inquiries.in.the.Last.6.Months",
"Employment.Length", "X")
numeric <- c("Amount.Requested", "Amount.Funded.By.Investors", "Interest.Rate", "FICO.Range",
"Revolving.CREDIT.Balance", "Inquiries.in.the.Last.6.Months", "Employment.Length")
categoric <- c("Loan.Length", "Debt.To.Income.Ratio", "State", "Home.Ownership",
"Monthly.Income", "Open.CREDIT.Lines", "X")
target  <- "Loan.Purpose"
risk    <- NULL
ident   <- NULL
ignore  <- NULL
weights <- NULL
# The 'amap' package provides the 'hclusterpar' function.
require(amap, quietly=TRUE)
#============================================================
# Rattle timestamp: 2014-04-05 20:26:20 x86_64-w64-mingw32
# Hierarchical Cluster
# Generate a hierarchical cluster of the data.
hclust <- hclusterpar(na.omit(dataset[sample, numeric]),
method="euclidean", link="ward", nbproc=1)
# Time taken: 0.01 secs
#============================================================
# Rattle timestamp: 2014-04-05 20:26:27 x86_64-w64-mingw32
# Dendrogram Plot
# The 'ggplot2' package provides the 'ggplot' function.
require(ggplot2, quietly=TRUE)
# The 'ggdendro' package provides the 'dendro_data' function.
require(ggdendro, quietly=TRUE)
# Generate the dendrogram plot.
ddata <- dendro_data(hclust, type="rectangle")
g <- ggplot(segment(ddata))
g <- g + geom_segment(aes(x = y, y = x, xend = yend, yend = xend))
g <- g + scale_y_discrete(labels = ddata$label$label)
g <- g + labs(x="Height", y="Observation")
g <- g + ggtitle(expression(atop("Cluster Dendrogram loansData.csv", atop(italic("Rattle 2014-Apr-05 20:26:27 Asus")))))
print(g)
#============================================================
